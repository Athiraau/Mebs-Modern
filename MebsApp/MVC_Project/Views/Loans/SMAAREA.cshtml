@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@{
    ViewData["Title"] = "SMAAREA";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    @*<meta http-equiv="refresh" content="8" />*@

    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <link rel="stylesheet" href="~/css/index.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.4/xlsx.full.min.js"></script>


    <style>
        .pagecontiner {
            background-color: transparent;
        }

        .dcontainer1 {
            width: 65%;
            height: auto;
            margin-left: 20%;
            padding: 6%;
            border-radius: 5px;
            background-color: #cfd8dc;
            box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
            font-size: small;
        }

        h5 {
            text-align: center;
        }

        .form-group {
            margin-bottom: 10px;
        }

        label {
            display: block;
            font-size: small;
        }

        input[type="date"],
        select {
            width: 100%;
            padding: 4px;
            border: 1px solid #ADC;
            border-radius: 5px;
        }



        table {
            width: 100%;
            border-collapse: collapse;
            font-size: initial;
        }

        .img1 {
            display: none;
            cursor: pointer;
        }

        th,
        td {
            border: 1px solid white;
            text-align: left;
            padding: 8px;
            font-size: initial;
        }

        th {
            background-color: #f2f2f2;
            font-size: initial;
        }




        .btn-grad {
            background-image: linear-gradient(to right, #4b6cb7 0%, #182848 51%, #4b6cb7 100%);
            text-transform: uppercase;
            transition: 0.5s;
            padding: 10px;
            background-size: 200% auto;
            color: white;
            border-radius: 10px;
            border: none;
            display: block;
        }


            .btn-grad:hover {
                background-position: right center; /* change the direction of the change here */
                color: #fff;
                text-decoration: none;
            }

        .fs-10 {
            font-size: 10px;
        }
    </style>
</head>
<body>
    <div class="pagecontiner">
        <div>

            <button type="button" id="fetchab" class="btn btn-dark">
                Excel Branch
            </button>
            <button type="button" id="fetchap" class="btn btn-dark" onclick="testfun()">
                Excel Pledgeee
            </button>
        </div>

        <!-- Table -->
        <div class="mt-5" id="dcontainer2">
            <table class="table  table-striped table-hover">
                <thead class="table table-secondary">
                    <tr>
                        <th class="table-secondary text-center" style="background-color:#898AA6" colspan="25">
                            MANAPPURAM FINANCE LIMITED
                        </th>
                    </tr>
                    <tr>
                        <th colspan="2">
                        </th>
                        <th class="text-center fs-10" colspan="19">
                            <label style="font-size:x-small">BRANCH NAME : @httpContextAccessor.HttpContext.Session.GetString("BrName")</label><label style="font-size:x-small">BRANCH ID : @httpContextAccessor.HttpContext.Session.GetString("BrID")</label>
                            <span id="FromDateSpan"></span>
                            To <span id="ToDateSpan"></span>
                        </th>

                        <th colspan="2" class="fs-10">
                            <span id="time"
                                  style="font-size:10px; font-weight:bold;"></span>
                        </th>

                    </tr>

                    </tr>
                    <tr>
                        <th colspan="2">
                        </th>
                        <th class="text-center fs-10" colspan="19">
                            AREAWISE SMA REPORT AS ON  02/Apr/2024<span id="FromDateSpan"></span>
                            To <span id="ToDateSpan"></span>
                        </th>

                        <th colspan="2" class="fs-10">
                            <span id="time"
                                  style="font-size:10px; font-weight:bold;"></span>
                        </th>

                    </tr>

                    <tr>
                        <th class="text-center fs-10" colspan="3">
                            SMA CLASSIFICATION REPORT
                        </th>
                        <th class="text-center fs-10" colspan="2">
                            NO DUES ACCOUNTS
                        </th>
                        <th class="text-center fs-10" colspan="2">
                            DUES ACCOUNTS
                        </th>
                        <th class="text-center fs-10" colspan="16">
                            BUCKETWISE DUE ACCOUNTS
                        </th>
                    </tr>

                    <tr>
                        <th class="fs-10">AREA</th>
                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">GL O/S</th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10" colspan="2">GL O/S</th>

                        <th class="fs-10"> LOAN COUNT </th>
                        <th class="fs-10" colspan="2">GL O/S</th>

                        <th class="fs-10" colspan="2">SMA-0</th>
                        <th class="fs-10" colspan="2">SMA-1</th>
                        <th class="fs-10" colspan="2">SMA-2</th>
                        <th class="fs-10" colspan="3">SMA-3</th>
                        <th class="fs-10" colspan="2">NON-NPA</th>
                        @*  <th class="fs-10" colspan="2">NON-NPA CROSS</th>
                        <th class="fs-10">NON-NPA TOTAL</th> *@
                        <th class="fs-10" colspan="2">Total</th>
                    </tr>

                    <tr>
                        <th class="fs-10"></th>
                        <th class="fs-10">Number</th>
                        <th class="fs-10">Crore</th>

                        <th class="fs-10">Number</th>
                        <th class="fs-10">Crore</th>

                        <th class="fs-10">%</th>
                        <th class="fs-10">Number</th>

                        <th class="fs-10">Crore</th>
                        <th class="fs-10">%</th>
                        <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>
                        <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>
                        <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>

                        <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>
                        <th class="fs-10">%</th>

                        <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>

                        @*   <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>

                        <th class="fs-10">Amt-Cr</th> *@

                        <th class="fs-10">Amt-Cr</th>
                        <th class="fs-10">%</th>
                    </tr>


                </thead>
                <tbody id="table-body">
                </tbody>
            </table>
        </div>
    </div>

   
    <script>
        function cleart() {
            const tableBody = document.getElementById('table-body');
            tableBody.innerHTML = '';
        }
    </script>

    <script>
        function formatDateForAPI(dateString) {
            // Split the date string into year, month, and day components
            const [year, month, day] = dateString.split("-");

            // Pad the month and day with leading zeros if necessary (optional)
            const paddedMonth = month.padStart(2, "0");
            const paddedDay = day.padStart(2, "0");

            // Reassemble the date in the desired format
            return `${paddedDay}-${paddedMonth}-${year}`;
        }


    </script>


    <script>
        document.getElementById('fetchab').addEventListener('click', function () {
            const dateString1 = '@ViewData["SelectedDate"]';
            const RId = '@ViewData["Regionid"]';
            const fDate = dateString1;
           
            var flag = "SMACLASSRPTAREA_BREXCEL";
            fetchExcel(fDate, RId, flag, '1');
            });

        //PLEDGE EXCEL
         document.getElementById('fetchap').addEventListener('click', function () {
            const dateString1 = '@ViewData["SelectedDate"]';
            const RId = '@ViewData["Regionid"]';
            const fDate = dateString1;

            var flag = "SMACLASSRPTAREA_PLEXCEL";
            fetchExcel(fDate, RId, flag, '1');
        });

        function fetchExcel(fDate, RId, flag, excelOption) {
            var _link = '';
            if (document.location.hostname == 'localhost') { _link = "/Loans/getAPIData"; }
            else { var root = '@ViewData["root"]'; _link = "/" + root + "/Loans/getAPIData"; }

            var data;
            indata = flag + "^" + fDate + "~" + RId;
            var response = '';
            $.ajax({
                type: "GET",
                url: _link,
                data: { datas: indata },
                async: false,
                success: function (response) {

                   data = JSON.parse(response);

                }
            });

            if (excelOption == '1') {
                fetchExcelbranch(data);
            }
            else {
                fetchExcelpledge(data);
            }
        }


        function fetchExcelbranch(data) {
              const extractedData = data.map(post => [post.AREANAME, post.BRANCHID, post.BRANCHNAME, post.NODUEBALANCE, post.NODUECOUNT, post.REGIONNAME, post.SMA0BALANCE, post.SMA0COUNT, post.SMA1BALANCE, post.SMA1COUNT, post.SMA2BALANCE, post.SMA2COUNT, post.SMA3BALANCE, post.SMA3COUNT, post.TOTALBALANCE, post.TOTALCOUNT, post.ZONALNAME, post.NON_NPABALANCE, post.NON_NPACOUNT]);

                    const workbook = XLSX.utils.book_new();

                    const worksheet = XLSX.utils.aoa_to_sheet(
                        [['', '', ''], ...extractedData],
                        {
                            '!cols': [
                                { wch: 90 },  // Column A (ID) width set to 10 characters
                                { wch: 90 }, // Column B (Title) width set to 30 characters
                                { wch: 90 }  // Column C (Body) width set to 50 characters
                            ],
                            '!rows': [
                                { hpx: 90 } // Row 1 (header) height set to 20 pixels
                            ]
                        }
                    );

            XLSX.utils.book_append_sheet(workbook, worksheet, 'Branchdata');

                    XLSX.writeFile(workbook, 'Branchdata.xlsx');

            Fdate = document.getElementById("FromDateSpan");
            Fdate.innerHTML = fDate;
            
        }

        function fetchExcelpledge(data) {

                    const extractedData = data.map(post => [post.AREANAME, post.AUCTIONSTATUS, post.BALANCE, post.BRANCHID, post.BRANCHNAME, post.CUSTOMERID, post.DUEDATE, post.INTRESTPAIDSTATUS, post.INTRESTRATE, post.INTRESTRECEIVED, post.NETACCRUED, post.NETWEIGHT, post.PLEDGECATEGORY, post.PLEDGENO, post.PLEDGEVALUE, post.REGIONNAME, post.SCHEME, post.SMASTATUS, post.STATENAME, post.TRANSACTIONDATE, post.ZONALNAME]);

                    const workbook = XLSX.utils.book_new();

                    const worksheet = XLSX.utils.aoa_to_sheet(
                        [['', '', ''], ...extractedData],
                        {
                            '!cols': [
                                { wch: 90 },  // Column A (ID) width set to 10 characters
                                { wch: 90 }, // Column B (Title) width set to 30 characters
                                { wch: 90 }  // Column C (Body) width set to 50 characters
                            ],
                            '!rows': [
                                { hpx: 90 } // Row 1 (header) height set to 20 pixels
                            ]
                        }
                    );

                    XLSX.utils.book_append_sheet(workbook, worksheet, 'excel');

                    XLSX.writeFile(workbook, 'excel.xlsx');

            Fdate = document.getElementById("FromDateSpan");
            Fdate.innerHTML = fDate;
        }
    </script>
    <script>

        function dateRound(number) {
            return Math.round(number * 100) / 100;

        }

        // Function to create and populate table with data
        function populateTable(data3) {
            // Get reference to the table body
            const tableBody = document.getElementById('table-body');

            // Clear existing table rows
            tableBody.innerHTML = '';

            let LoanCount = 0;
            let pledgeAmount = 0;
            let noduecount = 0;
            let nodueamount = 0;
            let noduepercentage = 0;
            let duescount = 0;
            let duesamount = 0;
            let duespercentage = 0;
            let sma0count = 0;
            let sma0amount = 0;
            let sma1count = 0;
            let sma1amount = 0;
            let sma2count = 0;
            let sma2amount = 0;
            let sma3count = 0;
            let sma3amount = 0;
            let npapercentage = 0;

            let nonnpacount = 0;
            let nonnpabalance = 0;
            let total = 0;
            let totalpercentage = 0;
            let total1 = {
                TOTAL_PER: 0, TOTAL_PER1: 0, TOTAL_PER2: 0, TOTAL_PER3: 0
            };

            // Iterate over the data and create table rows
            data3.forEach(item => {
                // Create a new row
                const row = tableBody.insertRow();
                const cellValue = parseFloat(item.PLEDGE_COUNT);
                const cellValue1 = parseFloat(item.PLEDGE_AMOUNT);
                const cellValue2 = parseFloat(item.NO_DUE_COUNT);
                const cellValue3 = parseFloat(item.NO_DUE_AMOUNT);
                const cellValue4 = parseFloat(item.NO_DUE_PERCENTAGE);
                const cellValue5 = parseFloat(item.DUES_COUNT);
                const cellValue6 = parseFloat(item.DUES_AMOUNT);
                const cellValue7 = parseFloat(item.DUES_PERCENTAGE);
                const cellValue8 = parseFloat(item.SMA0_COUNT);
                const cellValue9 = parseFloat(item.SMA0_AMOUNT);
                const cellValue10 = parseFloat(item.SMA1_COUNT);
                const cellValue11 = parseFloat(item.SMA1_AMOUNT);
                const cellValue12 = parseFloat(item.SMA2_COUNT);
                const cellValue13 = parseFloat(item.SMA2_AMOUNT);
                const cellValue14 = parseFloat(item.SMA3_COUNT);
                const cellValue15 = parseFloat(item.SMA3_AMOUNT);
                const cellValue16 = parseFloat(item.NPA_PERCENTAGE);

                const cellValue17 = parseFloat(item.NONNPA_COUNT);
                const cellValue18 = parseFloat(item.NONNPA_BALANCE);
                const cellValue19 = parseFloat(item.TOTAL);
                const cellValue20 = parseFloat(item.TOTAL_PERCENTAGE);

                // Insert cells into the row
                const cell1 = row.insertCell();
                cell1.style.fontSize = "8px";
                cell1.style.color = "blue";
                cell1.style.textDecoration = "underline"; // Add underline
                cell1.style.cursor = "pointer";
                const cell2 = row.insertCell();
                cell2.style.fontSize = "8px";
                const cell3 = row.insertCell();
                cell3.style.fontSize = "8px";
                const cell4 = row.insertCell();
                cell4.style.fontSize = "8px";
                const cell5 = row.insertCell();
                cell5.style.fontSize = "8px";
                const cell6 = row.insertCell();
                cell6.style.fontSize = "8px";
                const cell7 = row.insertCell();
                cell7.style.fontSize = "8px";
                const cell8 = row.insertCell();
                cell8.style.fontSize = "8px";
                const cell9 = row.insertCell();
                cell9.style.fontSize = "8px";
                const cell10 = row.insertCell();
                cell10.style.fontSize = "8px";
                const cell11 = row.insertCell();
                cell11.style.fontSize = "8px";
                const cell12 = row.insertCell();
                cell12.style.fontSize = "8px";
                const cell13 = row.insertCell();
                cell13.style.fontSize = "8px";
                const cell14 = row.insertCell();
                cell14.style.fontSize = "8px";
                const cell15 = row.insertCell();
                cell15.style.fontSize = "8px";
                const cell16 = row.insertCell();
                cell16.style.fontSize = "8px";
                const cell17 = row.insertCell();
                cell17.style.fontSize = "8px";
                const cell18 = row.insertCell();
                cell18.style.fontSize = "8px";
                const cell19 = row.insertCell();
                cell19.style.fontSize = "8px";
                const cell20 = row.insertCell();
                cell20.style.fontSize = "8px";
                const cell21 = row.insertCell();
                cell21.style.fontSize = "8px";
                const cell22 = row.insertCell();
                cell22.style.fontSize = "8px";



                // Add more cells if needed

                // Populate cells with data
                // cell1.textContent = item.FZM;
                cell1.innerHTML = `<a onclick="loadpage(${item.AREA_ID})">${item.AREA_NAME}</a>`;
                cell2.textContent = item.PLEDGE_COUNT;
                cell3.textContent = item.PLEDGE_AMOUNT;
                cell4.textContent = item.NO_DUE_COUNT;
                cell5.textContent = item.NO_DUE_AMOUNT;
                cell6.textContent = item.NO_DUE_PERCENTAGE;
                cell7.textContent = item.DUES_COUNT;
                cell8.textContent = item.DUES_AMOUNT;
                cell9.textContent = item.DUES_PERCENTAGE;
                cell10.textContent = item.SMA0_COUNT;
                cell10.style.backgroundColor = "#A5DD9B";
                cell11.textContent = item.SMA0_AMOUNT;
                cell11.style.backgroundColor = "#A5DD9B";
                cell12.textContent = item.SMA1_COUNT;
                cell12.style.backgroundColor = "#F6F193";
                cell13.textContent = item.SMA1_AMOUNT;
                cell13.style.backgroundColor = "#F6F193";
                cell14.textContent = item.SMA2_COUNT;
                cell14.style.backgroundColor = "#FFBE98";
                cell15.textContent = item.SMA2_AMOUNT;
                cell15.style.backgroundColor = "#FFBE98";
                cell16.textContent = item.SMA3_COUNT;
                cell16.style.backgroundColor = "#F55050";
                cell17.textContent = item.SMA3_AMOUNT;
                cell17.style.backgroundColor = "#F55050";
                cell18.textContent = item.NPA_PERCENTAGE;
                cell18.style.backgroundColor = "#F55050";
                cell19.textContent = item.NONNPA_COUNT;
                cell20.textContent = item.NONNPA_BALANCE;
                cell21.textContent = item.TOTAL;
                cell22.textContent = item.TOTAL_PERCENTAGE;




                LoanCount += cellValue;
                pledgeAmount += cellValue1;
                noduecount += cellValue2;
                nodueamount += cellValue3;
                noduepercentage += cellValue4;
                duescount += cellValue5;
                duesamount += cellValue6;
                duespercentage += cellValue7;
                sma0count += cellValue8;
                sma0amount += cellValue9;
                sma1count += cellValue10;
                sma1amount += cellValue11;
                sma2count += cellValue12;
                sma2amount += cellValue13;
                sma3count += cellValue14;
                sma3amount += cellValue15;
                npapercentage += cellValue16;

                nonnpacount += cellValue17;
                nonnpabalance += cellValue18;
                total += cellValue19;
                totalpercentage += cellValue20;


            });

            data3.forEach(item => {
                total1.TOTAL_PER += parseFloat(item.NO_DUE_PERCENTAGE, 10);
                total1.TOTAL_PER1 += parseFloat(item.DUES_PERCENTAGE, 10);
                total1.TOTAL_PER2 += parseFloat(item.NPA_PERCENTAGE, 10);
                total1.TOTAL_PER3 += parseFloat(item.TOTAL_PERCENTAGE, 10);

            });



            total1.TOTAL_PER = parseFloat(
                (total1.TOTAL_PER / data3.length).toFixed(2)

            );

            total1.TOTAL_PER1 = parseFloat(
                (total1.TOTAL_PER1 / data3.length).toFixed(2)

            );


            total1.TOTAL_PER2 = parseFloat(
                (total1.TOTAL_PER2 / data3.length).toFixed(2)

            );

            total1.TOTAL_PER3 = parseFloat(
                (total1.TOTAL_PER3 / data3.length).toFixed(2)

            );

  const row1 = tableBody.insertRow();
            const cell = row1.insertCell();
            cell.style.fontSize = "10px";
            const cell1 = row1.insertCell();
            cell1.style.fontSize = "9px";
            const cell2 = row1.insertCell();
            cell2.style.fontSize = "9px";
            const cell3 = row1.insertCell();
            cell3.style.fontSize = "9px";
            const cell4 = row1.insertCell();
            cell4.style.fontSize = "9px";
            const cell5 = row1.insertCell();
            cell5.style.fontSize = "9px";
            const cell6 = row1.insertCell();
            cell6.style.fontSize = "9px";
            const cell7 = row1.insertCell();
            cell7.style.fontSize = "9px";
            const cell8 = row1.insertCell();
            cell8.style.fontSize = "9px";
            const cell9 = row1.insertCell();
            cell9.style.fontSize = "9px";
            const cell10 = row1.insertCell();
            cell10.style.fontSize = "9px";

            const cell11 = row1.insertCell();
            cell11.style.fontSize = "9px";
            const cell12 = row1.insertCell();
            cell12.style.fontSize = "9px";
            const cell13 = row1.insertCell();
            cell13.style.fontSize = "9px";
            const cell14 = row1.insertCell();
            cell14.style.fontSize = "9px";
            const cell15 = row1.insertCell();
            cell15.style.fontSize = "9px";
            const cell16 = row1.insertCell();
            cell16.style.fontSize = "9px";
            const cell17 = row1.insertCell();
            cell17.style.fontSize = "9px";
            const cell18 = row1.insertCell();
            cell18.style.fontSize = "9px";
            const cell19 = row1.insertCell();
            cell19.style.fontSize = "9px";
            const cell20 = row1.insertCell();
            cell20.style.fontSize = "9px";
            const cell21 = row1.insertCell();
            cell21.style.fontSize = "9px";




            cell.textContent = "TOTAL:"
            cell.style.fontWeight = "900";
            cell1.textContent = LoanCount;
            cell1.style.fontWeight = "900";
            cell2.textContent = pledgeAmount;
            cell2.style.fontWeight = "900";
            cell3.textContent = noduecount;
            cell3.style.fontWeight = "900";
            cell4.textContent = dateRound(nodueamount);
            cell4.style.fontWeight = "900";
            cell5.textContent = total1.TOTAL_PER + "%";
            cell5.style.fontWeight = "900";
            cell6.textContent = duescount;
            cell6.style.fontWeight = "900";
            cell7.textContent = dateRound(duesamount);
            cell7.style.fontWeight = "900";
            cell8.textContent = total1.TOTAL_PER1 + "%";
            cell8.style.fontWeight = "900";
            cell9.textContent = sma0count;
            cell9.style.fontWeight = "900";
            cell10.textContent = sma0amount;
            cell10.style.fontWeight = "900";
            cell11.textContent = sma1count;
            cell11.style.fontWeight = "900";
            cell12.textContent = dateRound(sma1amount);
            cell12.style.fontWeight = "900";
            cell13.textContent = sma2count;
            cell13.style.fontWeight = "900";
            cell14.textContent = dateRound(sma2amount);
            cell14.style.fontWeight = "900";
            cell15.textContent = sma3count;
            cell15.style.fontWeight = "900";
            cell16.textContent = sma3amount;
            cell16.style.fontWeight = "900";
            cell17.textContent = total1.TOTAL_PER2 + "%";
            cell17.style.fontWeight = "900";

            cell18.textContent = nonnpacount;
            cell18.style.fontWeight = "900";
            cell19.textContent = nonnpabalance;
            cell19.style.fontWeight = "900";
            cell20.textContent = total;
            cell20.style.fontWeight = "900";
            cell21.textContent = total1.TOTAL_PER3 + "%";
            cell21.style.fontWeight = "900";

        }

        function loadpage(id) {
            var root = '@ViewData["root"]';

            var rootFolder = '';
            var baselink = '@ViewData["baseurl"]';


            if (document.location.hostname == 'localhost') {
                rootFolder = '';
            }
            else {
                rootFolder = baselink + root;
            }

            var d = '@ViewData["SelectedDate"]';
            let result = d.concat("~", id);


            window.location.href = rootFolder + "/Loans/SMABRANCH?data=" + result;   //
        }
        // Function to fetch data from API
        function fetchData(id) {
            var _link = '';
            if (document.location.hostname == 'localhost') { _link = "/Loans/getAPIData"; }
            else { var root = '@ViewData["root"]'; _link = "/" + root + "/Loans/getAPIData"; }

            let SelectedDate = '@ViewData["SelectedDate"]';

            //  const dt = fetchDate();
            var dataz;
            indata = "SMACLASSRPTAREA" + "^" + SelectedDate + "~" + id;
            var response = '';
            $.ajax({
                type: "GET",
                url: _link,
                data: { datas: indata },
                async: false,
                success: function (response) {

                    const data3 = JSON.parse(response);

                    populateTable(data3);
                }
            });
            }

        // Event Listerner For Button Click

        document.getElementById('fetch-button').addEventListener('click', function () {
            fetchData();
        });



        //Excel branch




    </script>





    <script type="text/javascript">

        function Validate() {
            var from = document.getElementById("fromDate");
            var to = document.getElementById("toDate");
            var dropdown = document.getElementById("dropdown");
            if (dropdown.value == "") {
                //If the "Please Select" option is selected display error.
                alert("Please select an option!");
                return false;
            } else if (from.value == "") {
                alert("please select  Fromdate");
                return false;
            } else if (to.value == "") {
                alert("please select  Todate");
                return false;
            }
            img.style.display = "block";
            return true;
        }
    </script>

    <script>

        function showContainer() {
            
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'block';
        }

        function unshowContainer() {
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'none';

            var img2 = document.getElementById("img");
            img2.style.display = "none";

            document.getElementById("fromDate").value = '';
            document.getElementById("toDate").value = '';
            document.getElementById("dropdown").selectedIndex = 0;
        }
    </script>


    <script>
        function updateTime() {
            const date = new Date();
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');
            const seconds = date.getSeconds().toString().padStart(2, '0');

            const currentTime = `${hours}:${minutes}:${seconds}`;

            document.getElementById("time").textContent = currentTime;
        }
        setInterval(updateTime, 1000);
    </script>
        <script>
        window.onload = function LoadFunction() {
                var id = '@ViewData["Regionid"]';
                fetchData(id);
            }
    </script>
    
</body>
</html>