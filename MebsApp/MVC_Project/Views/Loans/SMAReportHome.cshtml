@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@{
    ViewData["Title"] = "SMAReportHome";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    @*<meta http-equiv="refresh" content="8" />*@

    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <link rel="stylesheet" href="~/css/index.css">
    <meta charset="utf-8" />
    @*<meta http-equiv="refresh" content="8" />*@

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Boxicons CSS -->
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <script src="~/js/site.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js" integrity="sha256-/H4YS+7aYb9kJ5OKhFYPUjSJdrtV6AeyJOtTkw6X72o=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.6/jspdf.plugin.autotable.min.js"></script>
    <script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.4/xlsx.full.min.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <link rel="stylesheet" href="~/css/index.css">

    <link rel="stylesheet" href="~/css/sma_class.css">



</head>
<body>
    <div class="pagecontiner">
        @*        <div class="dcontainer1">
        *@
        <center>
            <div class="secondcontainer">
                <p class="m-auto fw-bolder h6" style="font-size:small;">SMA CLASSIFICATION REPORT</p>
            </div>
        </center>
        <form>
            <div class="form-group" style="padding: 20px 100px;">
                <div class="row" style="display:flex;align-items:center;">
                    <div class="col-lg-6 col-md-12 col-sm-12">
                        <label for="toDate" style="font-size:smaller;font-weight:600">TO DATE:</label>
                    </div>
                    <div class="col-lg-6 col-md-12 col-sm-12">
                        <input type="date" id="toDate" value="" name="toDate">
                    </div>
                </div>
            </div>
            <div class="row" style="margin:0;">
                <div class="col-lg-3">
                </div>
                <div class="col-lg-3 col-md-6 col-sm-12 ">
                    <button type="button" id="fetch-button" class=" btn-grad    "
                            onclick="Validate();showContainer();cleart();clrbuttton()" style="font-size:smaller;">
                        Proceed
                    </button>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-12">
                    <button type="button" class=" btn-grad" onclick="loadIndex1()" style="font-size:smaller;">Exit</button>
                </div>

                <!-- <button id="exportExcel" style=" width: 20px;">Export to Excel</button> -->

            </div>
            <div class="row" style="margin-top:20px">
                <div class="col-lg-3">
                </div>
                <div class="col-lg-3 col-md-6 col-sm-12 ">
                    <button type="button" id="fetch-button1" class="btn btn-dark" onclick="" style="font-size:9px">
                        Excel Branch
                    </button>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-12">
                    <button type="button" id="fetch-button2" class="btn btn-dark" onclick="" style="font-size:9px">
                        Excel Pledge
                    </button>
                </div>
            </div>
        </form>
        @*        </div>
        *@




        <!-- Table -->






        <div class="mt-5" style="display:none;width:100px;" id="dcontainer2">

            <table class="table  table-striped table-hover">
                <thead class="table table-secondary">
                    <tr>
                        <th class=" text-center" style="background-color:#898AA6" colspan="25">
                            MANAPPURAM FINANCE LIMITED
                        </th>
                    </tr>
                    <tr>
                        <th colspan="2">
                        </th>
                        <th class="text-center fs-10" colspan="21">
                            <label style="font-size:x-small">BRANCH NAME : @httpContextAccessor.HttpContext.Session.GetString("BrName")</label><label style="font-size:x-small">|  BRANCH ID : @httpContextAccessor.HttpContext.Session.GetString("BrID")</label>
                            <span id="FromDateSpan"></span>
                            To <span id="ToDateSpan"></span>
                        </th>

                        <th colspan="2" class="fs-10">
                            <span id="time"
                                  style="font-size:10px; font-weight:bold;"></span>
                        </th>

                    </tr>

                    </tr>
                    <tr>
                        <th colspan="2">
                        </th>
                        <th class="text-center fs-10" colspan="21">
                            ZONEWISE SMA REPORT AS ON 02/Apr/2024<span id="FromDateSpan"></span>
                            To <span id="ToDateSpan"></span>
                        </th>

                        <th colspan="2" class="fs-10">
                            <span id="time"
                                  style="font-size:10px; font-weight:bold;"></span>
                        </th>

                    </tr>

                    <tr>
                        <th class="text-center fs-10" colspan="3">
                            SMA CLASSIFICATION REPORT
                        </th>
                        <th class="text-center fs-10" colspan="2">
                            NO DUES ACCOUNTS
                        </th>
                        <th class="text-center fs-10" colspan="2">
                            DUES ACCOUNTS
                        </th>
                        <th class="text-center fs-10" colspan="18">
                            BUCKETWISE DUE ACCOUNTS
                        </th>
                    </tr>

                    <tr>
                        <th class="fs-10">ZONE</th>
                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">GL O/S</th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10" colspan="2">GL O/S</th>

                        <th class="fs-10"> LOAN COUNT </th>
                        <th class="fs-10" colspan="2">GL O/S</th>

                        <th class="fs-10" colspan="2" style="background-color: #A5DD9B">SMA-0</th>
                        <th class="fs-10" colspan="2" style="background-color: #FFDF00;">SMA-1</th>
                        <th class="fs-10" colspan="2" style="background-color: #ffa500;">SMA-2</th>
                        <th class="fs-10" colspan="3" style="background-color: #f65d3f;">SMA-3</th>
                        <th class="fs-10" colspan="2">NON-NPA</th>
                        <th class="fs-10" colspan="2">NON-NPA CROSS</th>
                        <th class="fs-10">NON-NPA TOTAL</th>
                        <th class="fs-10" colspan="2">Total</th>
                    </tr>

                    <tr>
                        <th class="fs-10"></th>
                        <th class="fs-10">Number</th>
                        <th class="fs-10">Crore</th>

                        <th class="fs-10">Number</th>
                        <th class="fs-10">Crore</th>

                        <th class="fs-10">%</th>
                        <th class="fs-10">Number</th>

                        <th class="fs-10">Crore</th>
                        <th class="fs-10">%</th>

                        <th class="fs-10" style="background-color: #A5DD9B">Count</th>
                        <th class="fs-10" style="background-color: #A5DD9B">Amt-Cr</th>
                        <th class="fs-10" style="background-color: #F6F193">Count</th>
                        <th class="fs-10" style="background-color: #F6F193">Amt-Cr</th>
                        <th class="fs-10" style="background-color: #FFBE98">Count</th>
                        <th class="fs-10" style="background-color: #FFBE98">Amt-Cr</th>

                        <th class="fs-10" style="background-color: #f65d3f;">Count</th>
                        <th class="fs-10" style="background-color: #f65d3f;">Amt-Cr</th>
                        <th class="fs-10" style="background-color: #f65d3f;">%</th>

                        <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>

                        <th class="fs-10">Count</th>
                        <th class="fs-10">Amt-Cr</th>

                        <th class="fs-10">Amt-Cr</th>

                        <th class="fs-10">Amt-Cr</th>
                        <th class="fs-10">%</th>
                    </tr>


                </thead>
                <tbody id="table-body">
                </tbody>
            </table>
        </div>

    </div>
    </div>

    <script>

        function loadIndex1() {
            var root = '';
            var baselink = '@ViewData["baseurl"]';
            var id = '@ViewData["HeadName"]';

            if (document.location.hostname == 'localhost') {
                window.location.href = "/Loans/Index?datas=" + id;
            }
            else {
                root = '@ViewData["root"]';
                domainurl = baselink + root;
                window.location.href = domainurl + "/Loans/Index?datas=" + id;
            }
        }
        function loadIndex() {

            var root = '';
            var baselink = '@ViewData["baseurl"]';
            var id = '@ViewData["HeadName"]';

            if (document.location.hostname == 'localhost') {
                window.location.href = "/loans/Index?datas=" + id;
            }
            else {
                root = '@ViewData["root"]';
                domainurl = baselink + root;
                window.location.href = domainurl + "/loans/Index?datas=" + id;
            }

        }



        function cleart() {
            const tableBody = document.getElementById('table-body');
            tableBody.innerHTML = '';
        }

        function clrbuttton() {
            a = document.getElementById('fetch-button1');
            b = document.getElementById('fetch-button2');
            a.style.display = "block";
            b.style.display = "block";
        }
    </script>



    <script>
        function formatDateForAPI(dateString) {
            // Split the date string into year, month, and day components
            const [year, month, day] = dateString.split("-");

            // Pad the month and day with leading zeros if necessary (optional)
            const paddedMonth = month.padStart(2, "0");
            const paddedDay = day.padStart(2, "0");

            // Reassemble the date in the desired format
            return `${paddedDay}-${paddedMonth}-${year}`;
        }


    </script>

    <script>
        function dateRound(number) {
            return Math.round(number * 100) / 100;

        }
        // Function to create and populate table with data
        function populateTable(data3) {

            // Get reference to the table body
            const tableBody = document.getElementById('table-body');

            // Clear existing table rows
            tableBody.innerHTML = '';

            //total count
            let LoanCount = 0;

            let LoanAmount = 0;
            let LoanAmount2 = 0;
            let LoanCount2 = 0;
            let LoanPercentage = 0;
            let LoanCount3 = 0;
            let LoanAmount3 = 0;
            let LoanPercentage2 = 0;
            let sma0Count = 0;
            let sma0Amount = 0;
            let sma1Count = 0;
            let sma1Amount = 0;
            let sma2Count = 0;
            let sma2Amount = 0;
            let sma3Count = 0;
            let sma3Amount = 0;
            let sma3Percentage = 0;

            let nonnpaCount = 0;
            let nonnpabalance = 0;
            let nonnpacommoncount = 0;
            let nonnpacommonbalance = 0;
            let totalnonnpacommon = 0;
            let total = 0;
            let totalPercentage = 0;
            let total1 = {
                TOTAL_PER: 0, TOTAL_PER1: 0, TOTAL_PER2: 0, TOTAL_PER3: 0
            };

            // Iterate over the data and create table rows
            data3.forEach(item => {

                // Create a new row
                const row = tableBody.insertRow();
                const cellValue = parseFloat(item.PLEDGE_COUNT);
                const cellValue1 = parseFloat(item.PLEDGE_AMOUNT);
                const cellValue2 = parseFloat(item.NO_DUE_COUNT);
                const cellValue3 = parseFloat(item.NO_DUE_AMOUNT);
                const cellValue4 = parseFloat(item.NO_DUE_PERCENTAGE);
                const cellValue5 = parseFloat(item.DUES_COUNT);
                const cellValue6 = parseFloat(item.DUES_AMOUNT);
                const cellValue7 = parseFloat(item.DUES_PERCENTAGE);
                const cellValue8 = parseFloat(item.SMA0_COUNT);
                const cellValue9 = parseFloat(item.SMA0_AMOUNT);
                const cellValue10 = parseFloat(item.SMA1_COUNT);
                const cellValue11 = parseFloat(item.SMA1_AMOUNT);
                const cellValue12 = parseFloat(item.SMA2_COUNT);
                const cellValue13 = parseFloat(item.SMA2_AMOUNT);
                const cellValue14 = parseFloat(item.SMA3_COUNT);
                const cellValue15 = parseFloat(item.SMA3_AMOUNT);
                const cellValue16 = parseFloat(item.NPA_PERCENTAGE);

                const cellValue17 = parseFloat(item.NONNPA_COUNT);
                const cellValue18 = parseFloat(item.NONNPA_BALANCE);
                const cellValue19 = parseFloat(item.NONNPACOMMON_COUNT);
                const cellValue20 = parseFloat(item.NONNPACOMMON_BALANCE);
                const cellValue21 = parseFloat(item.TOTAL_NONNPA_COMMON);
                const cellValue22 = parseFloat(item.TOTAL);
                const cellValue23 = parseFloat(item.TOTAL_PERCENTAGE);



                // Insert cells into the row
                const cell1 = row.insertCell();
                cell1.style.fontSize = "8px";
                cell1.style.color = "blue";
                cell1.style.textDecoration = "underline"; // Add underline
                cell1.style.cursor = "pointer";
                const cell2 = row.insertCell();
                cell2.style.fontSize = "8px";
                const cell3 = row.insertCell();
                cell3.style.fontSize = "8px";
                const cell4 = row.insertCell();
                cell4.style.fontSize = "8px";
                const cell5 = row.insertCell();
                cell5.style.fontSize = "8px";
                const cell6 = row.insertCell();
                cell6.style.fontSize = "8px";
                const cell7 = row.insertCell();
                cell7.style.fontSize = "8px";
                const cell8 = row.insertCell();
                cell8.style.fontSize = "8px";
                const cell9 = row.insertCell();
                cell9.style.fontSize = "8px";
                const cell10 = row.insertCell();
                cell10.style.fontSize = "8px";
                const cell11 = row.insertCell();
                cell11.style.fontSize = "8px";
                const cell12 = row.insertCell();
                cell12.style.fontSize = "8px";
                const cell13 = row.insertCell();
                cell13.style.fontSize = "8px";
                const cell14 = row.insertCell();
                cell14.style.fontSize = "8px";
                const cell15 = row.insertCell();
                cell15.style.fontSize = "8px";
                const cell16 = row.insertCell();
                cell16.style.fontSize = "8px";
                const cell17 = row.insertCell();
                cell17.style.fontSize = "8px";
                const cell18 = row.insertCell();
                cell18.style.fontSize = "8px";
                const cell19 = row.insertCell();
                cell19.style.fontSize = "8px";
                const cell20 = row.insertCell();
                cell20.style.fontSize = "8px";
                const cell21 = row.insertCell();
                cell21.style.fontSize = "8px";
                const cell22 = row.insertCell();
                cell22.style.fontSize = "8px";
                const cell23 = row.insertCell();
                cell23.style.fontSize = "8px";
                const cell24 = row.insertCell();
                cell24.style.fontSize = "8px";
                const cell25 = row.insertCell();
                cell25.style.fontSize = "8px";



                // Add more cells if needed

                // Populate cells with data
                // cell1.textContent = item.FZM;
                cell1.innerHTML = `<a onclick="loadpage(${item.ZONEID})">${item.FZM}</a>`;
                cell2.textContent = item.PLEDGE_COUNT;

                cell3.textContent = item.PLEDGE_AMOUNT;
                cell4.textContent = item.NO_DUE_COUNT;
                cell5.textContent = item.NO_DUE_AMOUNT;
                cell6.textContent = item.NO_DUE_PERCENTAGE;
                cell7.textContent = item.DUES_COUNT;
                cell8.textContent = item.DUES_AMOUNT;
                cell9.textContent = item.DUES_PERCENTAGE;
                cell10.textContent = item.SMA0_COUNT;
                cell10.style.backgroundColor = "#A5DD9B";
                cell11.textContent = item.SMA0_AMOUNT;
                cell11.style.backgroundColor = "#A5DD9B";
                cell12.textContent = item.SMA1_COUNT;
                cell12.style.backgroundColor = "#F6F193";
                cell13.textContent = item.SMA1_AMOUNT;
                cell13.style.backgroundColor = "#F6F193";
                cell14.textContent = item.SMA2_COUNT;
                cell14.style.backgroundColor = "#FFBE98";
                cell15.textContent = item.SMA2_AMOUNT;
                cell15.style.backgroundColor = "#FFBE98";
                cell16.textContent = item.SMA3_COUNT;
                cell16.style.backgroundColor = "#F55050";
                cell17.textContent = item.SMA3_AMOUNT;
                cell17.style.backgroundColor = "#F55050";
                cell18.textContent = item.NPA_PERCENTAGE;
                cell18.style.backgroundColor = "#F55050";
                cell19.textContent = item.NONNPA_COUNT;
                cell20.textContent = item.NONNPA_BALANCE;
                cell21.textContent = item.NONNPACOMMON_COUNT;
                cell22.textContent = item.NONNPACOMMON_BALANCE;
                cell23.textContent = item.TOTAL_NONNPA_COMMON;
                cell24.textContent = item.TOTAL;
                cell25.textContent = item.TOTAL_PERCENTAGE;


                LoanCount += cellValue;
                LoanAmount += cellValue1;
                LoanAmount2 += cellValue2;
                LoanCount2 += cellValue3;
                LoanPercentage += cellValue4;
                LoanCount3 += cellValue5;
                LoanAmount3 += cellValue6;
                LoanPercentage2 += cellValue7;
                sma0Count += cellValue8;
                sma0Amount += cellValue9;
                sma1Count += cellValue10;
                sma1Amount += cellValue11;
                sma2Count += cellValue12;
                sma2Amount += cellValue13;
                sma3Count += cellValue14;
                sma3Amount += cellValue15;
                sma3Percentage += cellValue16;

                nonnpaCount += cellValue17;
                nonnpabalance += cellValue18;
                nonnpacommoncount += cellValue19;
                nonnpacommonbalance += cellValue20;
                totalnonnpacommon += cellValue21;
                total += cellValue22;
                totalPercentage += cellValue23;


            });

            data3.forEach(item => {
                total1.TOTAL_PER += parseFloat(item.NO_DUE_PERCENTAGE, 10);
                total1.TOTAL_PER1 += parseFloat(item.DUES_PERCENTAGE, 10);
                total1.TOTAL_PER2 += parseFloat(item.NPA_PERCENTAGE, 10);
                total1.TOTAL_PER3 += parseFloat(item.TOTAL_PERCENTAGE, 10);

            });



            total1.TOTAL_PER = parseFloat(
                (total1.TOTAL_PER / data3.length).toFixed(2)

            );

            total1.TOTAL_PER1 = parseFloat(
                (total1.TOTAL_PER1 / data3.length).toFixed(2)

            );


            total1.TOTAL_PER2 = parseFloat(
                (total1.TOTAL_PER2 / data3.length).toFixed(2)

            );

            total1.TOTAL_PER3 = parseFloat(
                (total1.TOTAL_PER3 / data3.length).toFixed(2)

            );



            const row1 = tableBody.insertRow();
            const cell = row1.insertCell();
            cell.style.fontSize = "10px";
            const cell1 = row1.insertCell();
            cell1.style.fontSize = "9px";
            const cell2 = row1.insertCell();
            cell2.style.fontSize = "9px";
            const cell3 = row1.insertCell();
            cell3.style.fontSize = "9px";
            const cell4 = row1.insertCell();
            cell4.style.fontSize = "9px";
            const cell5 = row1.insertCell();
            cell5.style.fontSize = "9px";
            const cell6 = row1.insertCell();
            cell6.style.fontSize = "9px";
            const cell7 = row1.insertCell();
            cell7.style.fontSize = "9px";
            const cell8 = row1.insertCell();
            cell8.style.fontSize = "9px";
            const cell9 = row1.insertCell();
            cell9.style.fontSize = "9px";
            const cell10 = row1.insertCell();
            cell10.style.fontSize = "9px";

            const cell11 = row1.insertCell();
            cell11.style.fontSize = "9px";
            const cell12 = row1.insertCell();
            cell12.style.fontSize = "9px";
            const cell13 = row1.insertCell();
            cell13.style.fontSize = "9px";
            const cell14 = row1.insertCell();
            cell14.style.fontSize = "9px";
            const cell15 = row1.insertCell();
            cell15.style.fontSize = "9px";
            const cell16 = row1.insertCell();
            cell16.style.fontSize = "9px";
            const cell17 = row1.insertCell();
            cell17.style.fontSize = "9px";
            const cell18 = row1.insertCell();
            cell18.style.fontSize = "9px";
            const cell19 = row1.insertCell();
            cell19.style.fontSize = "9px";
            const cell20 = row1.insertCell();
            cell20.style.fontSize = "9px";
            const cell21 = row1.insertCell();
            cell21.style.fontSize = "9px";
            const cell22 = row1.insertCell();
            cell22.style.fontSize = "9px";
            const cell23 = row1.insertCell();
            cell23.style.fontSize = "9px";
            const cell24 = row1.insertCell();
            cell24.style.fontSize = "9px";



            cell.textContent = "TOTAL:"
            cell.style.fontWeight = "900";
            cell1.textContent = dateRound(LoanCount);
            cell1.style.fontWeight = "900";
            cell2.textContent = LoanAmount;
            cell2.style.fontWeight = "900";
            cell3.textContent = LoanAmount2;
            cell3.style.fontWeight = "900";
            cell4.textContent = LoanCount2;
            cell4.style.fontWeight = "900";
            cell5.textContent = total1.TOTAL_PER + "%";
            cell5.style.fontWeight = "900";
            cell6.textContent = LoanCount3;
            cell6.style.fontWeight = "900";
            cell7.textContent = LoanAmount3;
            cell7.style.fontWeight = "900";
            cell8.textContent = total1.TOTAL_PER1 + "%";
            cell8.style.fontWeight = "900";
            cell9.textContent = sma0Count;
            cell9.style.fontWeight = "900";
            cell10.textContent = dateRound(sma0Amount);
            cell10.style.fontWeight = "900";
            cell11.textContent = sma1Count;
            cell11.style.fontWeight = "900";
            cell12.textContent = sma1Amount;
            cell12.style.fontWeight = "900";
            cell13.textContent = sma2Count;
            cell13.style.fontWeight = "900";
            cell14.textContent = dateRound(sma2Amount);
            cell14.style.fontWeight = "900";
            cell15.textContent = sma3Count;
            cell15.style.fontWeight = "900";
            cell16.textContent = dateRound(sma3Amount);
            cell16.style.fontWeight = "900";
            cell17.textContent = total1.TOTAL_PER2 + "%";
            cell17.style.fontWeight = "900";
            cell18.textContent = nonnpaCount;
            cell18.style.fontWeight = "900";
            cell19.textContent = nonnpabalance;
            cell19.style.fontWeight = "900";
            cell20.textContent = nonnpacommoncount;
            cell20.style.fontWeight = "900";
            cell21.textContent = nonnpacommonbalance;
            cell21.style.fontWeight = "900";
            cell22.textContent = totalnonnpacommon;
            cell22.style.fontWeight = "900";
            cell23.textContent = dateRound(total);
            cell23.style.fontWeight = "900";
            cell24.textContent = total1.TOTAL_PER3 + "%";
            cell24.style.fontWeight = "900";



        }



        function formatDateForAPI(dateString) {
            // Split the date string into year, month, and day components
            const [year, monthString, day] = dateString.split("-");

            // Convert month string to month number (1-based for readability)
            const month = parseInt(monthString);

            // Define an object mapping month numbers to uppercase month names
            const monthNames = {
                1: "JAN",
                2: "FEB",
                3: "MAR",
                4: "APR",
                5: "MAY",
                6: "JUN",
                7: "JUL",
                8: "AUG",
                9: "SEP",
                10: "OCT",
                11: "NOV",
                12: "DEC",
            };

            // Check if month is valid (1-12)
            if (month < 1 || month > 12) {
                return "Invalid month";
            }


            // Use template literals and monthNames object for formatted output
            const formattedDate = `${day.padStart(2, "0")}-${monthNames[month]}-${year}`;

            return formattedDate;
        }

        //  const dateInput = document.getElementById("toDate");

        function loadpage(id) {
            const dateString1 = document.getElementById("toDate").value;
            const fDate = formatDateForAPI(dateString1);

            var root = '@ViewData["root"]';

            var rootFolder = '';
            var baselink = '@ViewData["baseurl"]';
            //  var id = '@ViewData["HeadName"]';

            if (document.location.hostname == 'localhost') {
                rootFolder = '';
            }
            else {
                rootFolder = baselink + root;
            }



            // String EncryDate = encrypt(fDate);

            let result = fDate.concat("~", id);


            window.location.href = rootFolder + "/Loans/SMAREGION?zoneid1=" + result;
        }

        // Event Listerner For Button Click

        document.getElementById('fetch-button').addEventListener('click', function () {
            const dateString1 = document.getElementById("toDate").value;
            const fDate = formatDateForAPI(dateString1);
            fetchData(fDate);
        });

        document.getElementById('fetch-button1').addEventListener('click', function () {
            const dateString1 = document.getElementById("toDate").value;
            const fDate = formatDateForAPI(dateString1);
            fetchExcel('SMACLASSRPTBRANCH_EXCEL', fDate, '1');
        });

        document.getElementById('fetch-button2').addEventListener('click', function () {
            const dateString1 = document.getElementById("toDate").value;
            const fDate = formatDateForAPI(dateString1);
            fetchExcel('SMACLASSRPTPLEDGE_EXCEL', fDate, '2');
        });

        function fetchExcel(flag, fDate, excelOption) {
            var _link = '';
            if (document.location.hostname == 'localhost') { _link = "/Loans/getAPIData"; }
            else { var root = '@ViewData["root"]'; _link = "/" + root + "/Loans/getAPIData"; }
            var data;
            indata = flag + "^" + fDate;
            var response = '';
            $.ajax({
                type: "GET",
                url: _link,
                data: { datas: indata },
                async: false,
                success: function (response) {

                    data = JSON.parse(response);

                }
            });

            if (excelOption == '1') {
                fetchExcelBranch(data);
            }
            else {
                fetchExcelPledge(data);

            }


        }
        // Function to fetch data from API

        function fetchData(fDate) {

            var _link = '';
            if (document.location.hostname == 'localhost') { _link = "/Loans/getAPIData"; }
            else { var root = '@ViewData["root"]'; _link = "/" + root + "/Loans/getAPIData"; }


            //  const dt = fetchDate();
            var dataz;
            indata = "SMACLASSRPTZONE" + "^" + fDate;
            var response = '';
            $.ajax({
                type: "GET",
                url: _link,
                data: { datas: indata },
                async: false,
                success: function (response) {

                    const data3 = JSON.parse(response);

                    populateTable(data3)
                }
            });
        }



    </script>


    <script type="text/javascript">
        function Validate() {
            var to = document.getElementById("toDate");
            if (to.value == "") {
                //If the "Please Select" option is selected display error.
                alert("Please select a date");
                return false;
            }
            return true;
        }
    </script>

    <script>

        function showContainer() {
            // alert("show c");
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'block';
        }

        function unshowContainer() {
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'none';

            var img2 = document.getElementById("img");
            img2.style.display = "none";

            document.getElementById("fromDate").value = '';
            document.getElementById("toDate").value = '';
            document.getElementById("dropdown").selectedIndex = 0;
        }

        function fetchExcelBranch(data) {

            const extractedData = data.map(post => [post.BRANCHID, post.BRANCHNAME, post.AREANAME, post.REGIONNAME, post.ZONALNAME, post.TOTALCOUNT, post.TOTALBALANCE, post.NODUECOUNT, post.NODUEBALANCE, post.SMA0COUNT, post.SMA0BALANCE, post.SMA1COUNT, post.SMA1BALANCE, post.SMA2COUNT, post.SMA2BALANCE, post.SMA3COUNT, post.SMA3BALANCE, post.NON_NPACOUNT, post.NON_NPABALANCE]);

            const workbook = XLSX.utils.book_new();

            const worksheet = XLSX.utils.aoa_to_sheet(
                [['', '', ''], ...extractedData],
                {
                    '!cols': [
                        { wch: 90 },  // Column A (ID) width set to 10 characters
                        { wch: 90 }, // Column B (Title) width set to 30 characters
                        { wch: 90 }  // Column C (Body) width set to 50 characters
                    ],
                    '!rows': [
                        { hpx: 90 } // Row 1 (header) height set to 20 pixels
                    ]
                }
            );

            XLSX.utils.book_append_sheet(workbook, worksheet, 'Posts');

            XLSX.writeFile(workbook, 'branch.xlsx');

            Fdate = document.getElementById("FromDateSpan");
            Fdate.innerHTML = fDate;

        }



        function fetchExcelPledge(data) {


            const extractedData = data.map(post => [post.BRANCHID, post.BRANCHNAME, post.AREANAME, post.REGIONNAME, post.ZONALNAME, post.STATENAME, post.PLEDGENO, post.CUSTOMERID, post.TRANSACTIONDATE, post.PLEDGEVALUE, post.NETWEIGHT, post.SCHEME, post.INTRESTRATE, post.BALANCE, post.NETACCRUED, post.INTRESTRECEIVED, post.DUEDATE, post.AUCTIONSTATUS, post.INTRESTPAIDSTATUS, post.PLEDGECATEGORY, post.SMASTATUS]);

            const workbook = XLSX.utils.book_new();

            const worksheet = XLSX.utils.aoa_to_sheet(
                [['', '', ''], ...extractedData],
                {
                    '!cols': [
                        { wch: 90 },  // Column A (ID) width set to 10 characters
                        { wch: 90 }, // Column B (Title) width set to 30 characters
                        { wch: 90 }  // Column C (Body) width set to 50 characters
                    ],
                    '!rows': [
                        { hpx: 90 } // Row 1 (header) height set to 20 pixels
                    ]
                }
            );

            XLSX.utils.book_append_sheet(workbook, worksheet, 'Posts');
            XLSX.writeFile(workbook, 'pledge.xlsx');
            Fdate = document.getElementById("FromDateSpan");
            Fdate.innerHTML = fDate;
        }
    </script>


    <script>
        function updateTime() {
            const date = new Date();
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');
            const seconds = date.getSeconds().toString().padStart(2, '0');

            const currentTime = `${hours}:${minutes}:${seconds}`;

            document.getElementById("time").textContent = currentTime;
        }
        setInterval(updateTime, 1000);
    </script>
</body>

</html>