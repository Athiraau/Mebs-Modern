@{
    ViewData["Title"] = "PledgeWiseREPORT";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    @*<meta http-equiv="refresh" content="8" />*@

    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <link rel="stylesheet" href="~/css/index.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.4/xlsx.full.min.js"></script>




    <style>
        .pagecontiner {
            background-color: transparent;
        }

        .dcontainer1 {
            width: 65%;
            height: auto;
            margin-left: 20%;
            padding: 6%;
            border-radius: 5px;
            background-color: #cfd8dc;
            box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
            font-size: small;
        }

        #dcontainer2 {
            display: none;
            height: 40%;
            width: 50%;
        }

        h5 {
            text-align: center;
        }

        .form-group {
            margin-bottom: 10px;
        }

        label {
            display: block;
            font-size: small;
        }

        input[type="date"],
        select {
            width: 100%;
            padding: 4px;
            border: 1px solid #ADC;
            border-radius: 5px;
        }



        table {
            width: 100%;
            border-collapse: collapse;
            font-size: initial;
        }

        .img1 {
            display: none;
            cursor: pointer;
        }

        th,
        td {
            border: 1px solid white;
            text-align: left;
            padding: 8px;
            font-size: 10px;
            font-weight: bold;
            
        }

        th {
            background-color: #f2f2f2;
            font-size: 10px;
      }




        .btn-grad {
            background-image: linear-gradient(to right, #4b6cb7 0%, #182848 51%, #4b6cb7 100%);
            text-transform: uppercase;
            transition: 0.5s;
            padding: 10px;
            background-size: 200% auto;
            color: white;
            border-radius: 10px;
            border: none;
            display: block;
           
        }


            .btn-grad:hover {
                background-position: right center; /* change the direction of the change here */
                color: #fff;
                text-decoration: none;
            }

        .fs-10 {
            font-size: 10px;
        }
    </style>
</head>


<body>
    <div class="pagecontiner">

        <div class="dcontainer1">


            <form>
                <div class="secondcontainer">
                    <p style="font-size:large">PlEDGE WISE REPORT</p>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-lg-6 col-md-12 col-sm-12">
                            <label for="fromDate" style="font-size:11px">FROM DATE:</label>
                        </div>
                        <div class="col-lg-6 col-md-12 col-sm-12">
                            <input type="date" id="fromDate" value="" name="fromDate">

                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-lg-6 col-md-12 col-sm-12">
                            <label for="fromDate" style="font-size:11px">TO DATE:</label>
                        </div>
                        <div class="col-lg-6 col-md-12 col-sm-12">
                            <input type="date" id="toDate" value="" name="toDate">

                        </div>
                    </div>
                </div>
                <div class="row" style="margin-top:20px;font-size:11px;font-weight:800;">
                    <div class="col-lg-3">
                    </div>
                    <div class="col-lg-3 col-md-6 col-sm-12 ">
                        <button type="button" id="fetch-button" class=" btn-grad    "
                                onclick="fetchData();">
                            SUBMIT
                        </button>
                    </div>
                    <div class="col-lg-3 col-md-6 col-sm-12">
                        <button type="button" class=" btn-grad" onclick="loadIndex()">EXIT</button>
                    </div>


                    <!-- <button id="exportExcel" style=" width: 20px;">Export to Excel</button> -->

                </div>

            </form>
        </div>
        <div class="mt-5" id="dcontainer2" style="margin-top:20px;font-size:11px;font-weight:800;">
            <div>

                <button type="button" id="fetchbb" class="btn btn-dark" onclick="">
                    Export to Excel
                </button>

            </div>
            <div>


                <table class="table table-striped table-hover" id="your-table-id">
                    <thead>
                        <tr>
                            <th class="table-secondary text-center" style="background-color:#fdd935" colspan="17">
                                MANAPPURAM FINANCE LIMITED
                            </th>
                        </tr>

                        <tr>
                            <th class="text-center fs-10" colspan="17">
                                BRANCH NAME : A.O.VALAPAD -- BRANCH ID : 0
                            </th>
                        </tr>

                        <tr style="background-color:#808080">
                            <th colspan="5">
                                <span id="date" style="font-size:10px; font-weight:bold;"></span>
                            </th>
                            <th class="text-center fs-10" colspan="7">
                                PLEDGE WISE REPORT
                            </th>
                            <th colspan="5" class="fs-10">
                                <span id="time" style="font-size:10px; font-weight:bold;"></span>
                            </th>
                        </tr>

                        <tr style="background-color:lightslategray">
                            <th class="text-center fs-10 text-white">SL.NO</th>
                            <th class="text-center fs-10 text-white">BRANCH ID</th>
                            <th class="text-center fs-10 text-white">BRANCH NAME</th>
                            <th class="text-center fs-10 text-white">AREA NAME</th>
                            <th class="text-center fs-10 text-white">REGION NAME</th>
                            <th class="text-center fs-10 text-white">ZONE NAME</th>
                            <th class="text-center fs-10 text-white">STATE NAME</th>
                            <th class="text-center fs-10 text-white">CUSTOMER ID</th>
                            <th class="text-center fs-10 text-white">CUSTOMER NAME</th>
                            <th class="text-center fs-10 text-white">PLEDGE NUMBER</th>
                            <th class="text-center fs-10 text-white">AUCTION SETTLEMENT DATE</th>
                            <th class="text-center fs-10 text-white">SURPLUS GENERATED DATE</th>
                            <th class="text-center fs-10 text-white">SURPLUS PAYID</th>
                            <th class="text-center fs-10 text-white">TOTAL SURPLUS GENERATED AMOUNT</th>
                            <th class="text-center fs-10 text-white">CHEQUE/NEFT/POSTAL/CHARGE</th>
                            <th class="text-center fs-10 text-white">ADJUSTED AMOUNT</th>
                            <th class="text-center fs-10 text-white">NET PAY SURPLUS AMOUNT</th>
                        </tr>
                    </thead>
                    <tbody id="table-body1">
                    </tbody>
                </table>
            </div>
        </div>

    </div>

    <script>

        function ActiveLoginCheck() {
            var user = '@ViewData["EmpCode"]';
            if (user == null || user == '') {
                alert('INACTIVE SESSION');
                loadIndex();
            }

        }
        window.onload = function OnloadFunction() {
            ActiveLoginCheck();
            form_access();
            alertfunction();
        }
        var slno = '0';
        function form_access() {

            var _link = '';
            if (document.location.hostname == 'localhost') { _link = "/Loans/getAPIData"; }
            else { var root = '@ViewData["root"]'; _link = "/" + root + "/Loans/getAPIData"; }


            const EmpCode = '@ViewData["EmpCode"]';
            indata = "Mebs_Auction" + "^" + "PledgewiserptAccess" + "~" + EmpCode;
            var response = '';
            $.ajax({
                type: "GET",
                url: _link,
                data: { datas: indata },
                async: false,
                success: function (response) {

                    slno = response;

                },
                error: function (response) {
                    // alert("failed");
                }
            });


            slno = JSON.parse(slno);
            slno = slno[0].RESULT;


        }
        function alertfunction() {


            if (slno == 0) {
                alert("You Are Not Authorised to View This Page !!");
                loadIndex();
                return;
            }




        }
       </script>
       <script>
        function loadIndex() {

            var root = '';
            var baselink = '@ViewData["baseurl"]';
            var id = '@ViewData["HeadName"]';

            if (document.location.hostname == 'localhost') {
                window.location.href = "/Loans/Index?datas=" + id;
            }
            else {
                root = '@ViewData["root"]';
                domainurl = baselink + root;
                window.location.href = domainurl + "/Loans/Index?datas=" + id;
            }

        }

      

        //code for validation


        //code for showing the table container

        function showContainer() {
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'block';

            var buttonSummary = document.getElementById('fetch-button1');
            buttonSummary.style.display = "block";

            var buttonNpa = document.getElementById('fetch-button2');
            buttonNpa.style.display = "block";


            var buttonNonNpa = document.getElementById('fetch-button3');
            buttonNonNpa.style.display = "block";
        }

        //Code for Exit Button (for hidding the table)

        function unshowContainer() {
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'none';

            var buttonSummary = document.getElementById('fetch-button1');
            buttonSummary.style.display = "none";

            var buttonNpa = document.getElementById('fetch-button2');
            buttonNpa.style.display = "none";


            var buttonNonNpa = document.getElementById('fetch-button3');
            buttonNonNpa.style.display = "none";


            document.getElementById("fromDate").value = '';
            document.getElementById("toDate").value = '';
            document.getElementById("dropdown").selectedIndex = 0;

        }

        function callAPIResponse(indata) {

            var _link = '';
            if (document.location.hostname == 'localhost') { _link = "/Loans/getAPIData"; }
            else { var root = '@ViewData["root"]'; _link = "/" + root + "/Loans/getAPIData"; }


            var dataz;
            indata = "Mebs_Auction" + "^" + "Pledgewiserpt" + "~" + indata;
            var response = '';
            $.ajax({
                type: "GET",
                url: _link,
                data: { datas: indata },
                async: false,
                success: function (response) {

                    const data3 = JSON.parse(response);
                    populateTable(data3)
                    showContainer();
                }
            });
        }

        //disable futuredate
        function disableFutureDates(dateInputId) {
            const dateInput = document.getElementById(dateInputId);
            const today = new Date();
            dateInput.setAttribute('max', today.toISOString().split('T')[0]);
        }
        disableFutureDates("fromDate");
        disableFutureDates("toDate");

        function fetchData() {
            //alert("fetch");
            var baselink = '@ViewData["baseurl"]';
            var from = document.getElementById("fromDate");
            var to = document.getElementById("toDate");
            dt = fetchDate();
            dt1 = fetchDate1();
            var indata = dt + "*" + dt1;


            if (from.value == "") {
                //If the "Please Select" option is selected display error.
                alert("Please select from date");
                return false;
            }
            else if (to.value == "") {
                //If the "Please Select" option is selected display error.
                alert("Please select to date");
                return false;
            }
            else {
                callAPIResponse(indata);
            }


        }

        function fetchDate() {
            var getdate = document.getElementById('fromDate').value;
            // alert(getdate);

            const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];

            const [year, month, day] = getdate.split("-");
            const formattedMonth = months[parseInt(month, 10) - 1];
            const formattedDate = `${day}-${formattedMonth}-${year}`;
            //document.getElementById("processDate").innerHTML = formattedDate;
            return formattedDate;
        }
        function fetchDate1() {
            var getdate1 = document.getElementById('toDate').value;
            // alert(getdate);

            const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];

            const [year, month, day] = getdate1.split("-");
            const formattedMonth = months[parseInt(month, 10) - 1];
            const formattedDate1 = `${day}-${formattedMonth}-${year}`;
            //document.getElementById("processDate").innerHTML = formattedDate;
            return formattedDate1;
        }
        function populateTable(data) {

            // Get reference to the table body
            const tableBody = document.getElementById('table-body1');

            // Clear existing table rows
            tableBody.innerHTML = '';



            // Iterate over the data and create table rows
            data.forEach(item => {

                const cellvalue = parseFloat(item.SLNO);
                const cellvalue1 = parseFloat(item.BRANCH_ID);
                const cellvalue2 = parseFloat(item.BRANCH_NAME);
                const cellvalue3 = parseFloat(item.AREA_NAME);
                const cellvalue4 = parseFloat(item.REG_NAME);
                const cellvalue5 = parseFloat(item.FZM);
                const cellvalue6 = parseFloat(item.STATE_NAME);
                const cellvalue7 = parseFloat(item.CUST_ID);
                const cellvalue8 = parseFloat(item.CUST_NAME);
                const cellvalue9 = parseFloat(item.PLEDGE_NO);
                const cellvalue10 = parseFloat(item.PLEDGE_SETTLE_DT);
                const cellvalue11 = parseFloat(item.PROCESS_DT);
                const cellvalue12 = parseFloat(item.SURPLUS_PAYID);
                const cellvalue13 = parseFloat(item.ACTUAL_SURPLUS);
                const cellvalue14 = parseFloat(item.POSTAGE_SURPLUS);
                const cellvalue15 = parseFloat(item.SURPLUSS1);
                const cellvalue16 = parseFloat(item.SURPLUS);

                // Create a new row
                const row = tableBody.insertRow();

                // Insert cells into the row
                const cell1 = row.insertCell();
                const cell2 = row.insertCell();
                const cell3 = row.insertCell();
                const cell4 = row.insertCell();
                const cell5 = row.insertCell();
                const cell6 = row.insertCell();
                const cell7 = row.insertCell();
                const cell8 = row.insertCell();
                const cell9 = row.insertCell();
                const cell10 = row.insertCell();
                const cell11 = row.insertCell();
                const cell12 = row.insertCell();
                const cell13 = row.insertCell();
                const cell14 = row.insertCell();
                const cell15 = row.insertCell();
                const cell16 = row.insertCell();
                const cell17 = row.insertCell();


                // Add more cells if needed

                // Populate cells with data
                cell1.textContent = item.SLNO;
                cell2.textContent = item.BRANCH_ID;
                cell3.textContent = item.BRANCH_NAME;
                cell4.textContent = item.AREA_NAME;
                cell5.textContent = item.REG_NAME;
                cell6.textContent = item.FZM;
                cell7.textContent = item.STATE_NAME;
                cell8.textContent = item.CUST_ID;
                cell9.textContent = item.CUST_NAME;
                cell10.textContent = item.PLEDGE_NO;
                cell11.textContent = item.PLEDGE_SETTLE_DT;
                cell12.textContent = item.PROCESS_DT;
                cell13.textContent = item.SURPLUS_PAYID;
                cell14.textContent = item.ACTUAL_SURPLUS;
                cell15.textContent = item.POSTAGE_SURPLUS;
                cell16.textContent = item.SURPLUSS1;
                cell17.textContent = item.SURPLUS;

                cell10.style.backgroundColor = 'greenyellow';
                cell11.style.backgroundColor = 'greenyellow';
                cell12.style.backgroundColor = 'yellow';
                cell13.style.backgroundColor = 'yellow';
                cell14.style.backgroundColor = 'orange';
                cell15.style.backgroundColor = 'orange';
                cell16.style.backgroundColor = 'red';
                cell17.style.backgroundColor = 'red';



            });



            const row1 = tableBody.insertRow();

            row1.style = 'font-weight:bolder;font-size:12px;background-color:white';

            const cell1 = row1.insertCell();
            const cell2 = row1.insertCell();
            const cell3 = row1.insertCell();
            const cell4 = row1.insertCell();
            const cell5 = row1.insertCell();
            const cell6 = row1.insertCell();
            const cell7 = row1.insertCell();
            const cell8 = row1.insertCell();
            const cell9 = row1.insertCell();
            const cell10 = row1.insertCell();
            const cell11 = row1.insertCell();
            const cell12 = row1.insertCell();
            const cell13 = row1.insertCell();
            const cell14 = row1.insertCell();
            const cell15 = row1.insertCell();
            const cell16 = row1.insertCell();
            const cell17 = row1.insertCell();

            cell10.style.backgroundColor = 'greenyellow';
            cell11.style.backgroundColor = 'greenyellow';
            cell12.style.backgroundColor = 'yellow';
            cell13.style.backgroundColor = 'yellow';
            cell14.style.backgroundColor = 'orange';
            cell15.style.backgroundColor = 'orange';
            cell16.style.backgroundColor = 'red';
            cell17.style.backgroundColor = 'red';



        }


        document.getElementById('fetchbb').addEventListener('click', function () {
            //const dateString1 = '@ViewData["SelectedDate"]';
            // const AId = '@ViewData["Areaid"]';
            // const fDate = dateString1;
            dt = fetchDate();
            dt1 = fetchDate1();
            var fdate = dt + "*" + dt1;
            callAPIExcelResponse(fdate);
        });


        function callAPIExcelResponse(fdate) {

            var baselink = '@ViewData["baseurl"]';

            const input = fdate + '~1';


            var _link = '';
            if (document.location.hostname == 'localhost') { _link = "/Loans/getAPIData"; }
            else { var root = '@ViewData["root"]'; _link = "/" + root + "/Loans/getAPIData"; }


            var dataz;
            // const data3='';
            indata = "Mebs_Auction" + "^" + "Pledgewiserptexl" + "~" + input;
            var response = '';
            $.ajax({
                type: "GET",
                url: _link,
                data: { datas: indata },
                async: false,
                success: function (response) {

                    const data3 = JSON.parse(response);
                    populateExcel(data3);
                    // showContainer();
                }
            });
            //return data3;
        }


        function populateExcel(data) {


            // Loop and apply regex to each key, also replacing hyphens with underscores
            const cleanData = data.map(obj => {
                const newObj = {};
                Object.keys(obj).forEach(key => {
                    const cleanedKey = removeQuotesAndHyphens(key).replace(/-/g, '_');
                    newObj[cleanedKey] = obj[key];
                });
                return newObj;
            });

            const dataStr = JSON.stringify(cleanData); // Stringify with indentation
            console.log(dataStr);


            // Remove hyphens from top-level object keys (if needed)
            const dataWithoutHyphens = cleanData.map(obj => {
                const newObj = {};
                for (const key in obj) {
                    const cleanedKey = key.replace(/-/g, '_');
                    newObj[cleanedKey] = obj[key];
                }
                return newObj;
            });

            // Convert to JSON string (optional)
            const dataString = JSON.stringify(dataWithoutHyphens); // Stringify with indentation

            const data33 = JSON.parse(dataString);

            console.log(data33);

            function removeQuotesRegex(str) {
                return str.replace(/^'([^']+)'$/, '$1');
            }

            // Loop and apply regex to each key
            const clData = data33.map(obj => {
                const newObj = {};
                Object.keys(obj).forEach(key => {
                    newObj[removeQuotesRegex(key)] = obj[key];
                });
                return newObj;
            });
            const data4 = JSON.stringify(clData);

            console.log(data4);

            const dataWithoutHyphenandQoutes = JSON.parse(data4);

            console.log(data4);



            const extractedData = dataWithoutHyphenandQoutes.map(post => [post.BRANCH_ID, post.BRANCH_NAME, post.AREA_NAME, post.REG_NAME, post.FZM, post.STATE_NAME, post.CUST_ID, post.CUST_NAME, post.PLEDGE_NO, post.PLEDGE_SETTLE_DT, post.PROCESS_DT, post.SURPLUS_PAYID, post.ACTUAL_SURPLUS, post.POSTAGE_SURPLUS, post.surplus1, post.SURPLUS]);

            const workbook = XLSX.utils.book_new();

            const worksheet = XLSX.utils.aoa_to_sheet(
                [['', '', ''], ...extractedData],
                {
                    '!cols': [
                        { wch: 90 },  // Column A (ID) width set to 10 characters
                        { wch: 90 }, // Column B (Title) width set to 30 characters
                        { wch: 90 }  // Column C (Body) width set to 50 characters
                    ],
                    '!rows': [
                        { hpx: 90 } // Row 1 (header) height set to 20 pixels
                    ]
                }
            );

            XLSX.utils.book_append_sheet(workbook, worksheet, 'Posts');

            XLSX.writeFile(workbook, 'posts.xlsx');
            function removeQuotesRegex(str) {
                return str.replace(/^'([^']+)'$/, '$1');
            }

            function removeQuotesAndHyphens(str) {
                return str.replace(/^'([^']+)-([^']+)'$/, '$1_$2'); // Combine quote and hyphen removal with underscore
            }


        }


    </script>
    @* <script>updateDate();</script>*@
</body>
</html>
